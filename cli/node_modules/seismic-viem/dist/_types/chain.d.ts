import type { Address, Chain, ChainFormatters, Hex, RpcSchema, SerializeTransactionFn, TransactionRequest, TransactionSerializable } from 'viem';
/**
 * The additional fields added to a Seismic transaction
 * @interface SeismicTxExtras
 * @property {Hex} [encryptionPubkey] - The public key used to encrypt the calldata. This uses AES encryption, where the user's keypair is combined with the network's keypair
 * @property {number} [messageVersion] - The version of the message being sent. Used for signing transactions via messages. Normal transactions use messageVersion = 0. Txs signed with EIP-712 use messageVersion = 2
 */
export type SeismicTxExtras = {
    encryptionPubkey?: Hex | undefined;
    messageVersion?: number | undefined;
};
/**
 * Represents a Seismic transaction request, extending viem's base {@link https://viem.sh/docs/glossary/types#transactionrequest TransactionRequest} with {@link SeismicTxExtras}
 *
 * @interface SeismicTransactionRequest
 * @extends {TransactionRequest}
 * @extends {SeismicTxExtras}
 */
export type SeismicTransactionRequest = TransactionRequest & SeismicTxExtras;
/**
 * Represents a serializable Seismic transaction, extending viem's base {@link https://viem.sh/docs/utilities/parseTransaction#returns TransactionSerializable} with {@link SeismicTxExtras}
 *
 * @interface TransactionSerializableSeismic
 * @extends {TransactionSerializable}
 * @extends {SeismicTxExtras}
 */
export type TransactionSerializableSeismic = TransactionSerializable & SeismicTxExtras;
export type TxSeismic = {
    chainId?: number | undefined;
    nonce?: bigint | undefined;
    gasPrice?: bigint | undefined;
    gasLimit?: bigint | undefined;
    to?: Address | null | undefined;
    value?: bigint | undefined;
    input?: Hex | undefined;
    encryptionPubkey: Hex;
    messageVersion: number | undefined;
};
export type SeismicTxSerializer = SerializeTransactionFn<TransactionSerializableSeismic>;
export declare const serializeSeismicTransaction: SeismicTxSerializer;
export declare const seismicRpcSchema: RpcSchema;
export declare const allTransactionTypes: {
    readonly seismic: "0x4a";
    readonly legacy: "0x0";
    readonly eip2930: "0x1";
    readonly eip1559: "0x2";
    readonly eip4844: "0x3";
    readonly eip7702: "0x4";
};
/**
 * Chain formatters for Seismic transactions, providing formatting utilities for transaction requests.
 * @property {SeismicTransactionRequest} transactionRequest - Formatter configuration for transaction requests
 * @property {Function} transactionRequest.format - Formats a Seismic transaction request into the required RPC format
 * @param {SeismicTransactionRequest} request - The transaction request to be formatted
 * @returns {Object} A formatted transaction request object containing:
 *   - All properties from the formatted RPC request
 *   - `type` (optional) - Set to '0x4a' if encryption public key is present
 *   - `data` (optional) - Transaction data if present
 *   - `encryptionPubkey` (optional) - Public key for transaction encryption
 *   - `chainId` (optional) - Chain ID for the transaction
 * @remarks
 * This function is called by viem's call, estimateGas, and sendTransaction.
 * We can use this to parse transaction request before sending it to the node
 */
export declare const seismicChainFormatters: ChainFormatters;
export type CreateSeismicDevnetParams = {
    explorerUrl?: string;
} & ({
    node?: number;
    nodeHost: string;
} | {
    node: number;
    nodeHost?: string;
});
/**
 * Creates a Seismic development network chain configuration.
 *
 * @param {CreateSeismicDevnetParams} params - The parameters for creating a Seismic devnet.
 *   - `node` (number, optional) - The node number for the devnet. If provided without `nodeHost`,
 *     the hostname will be generated as `node-{node}.seismicdev.net`.
 *   - `nodeHost` (string, optional) - The direct hostname for the node. Required if `node` is not provided.
 *   - `explorerUrl` (string, optional) - Custom block explorer URL. If not provided and `node` exists,
 *     defaults to `https://explorer-{node}.seismicdev.net`.
 *
 * @throws {Error} Throws if neither node number nor nodeHost is provided.
 *
 * @returns {Chain} A chain configuration object containing:
 *   - Chain ID: 5124.
 *   - Network name: 'Seismic'.
 *   - Native ETH currency configuration.
 *   - RPC URLs (HTTP and WebSocket endpoints).
 *   - Block explorer configuration (if applicable).
 *   - Seismic-specific transaction formatters.
 *
 * @example
 * ```typescript
 * // Create using node number
 * const devnet1 = createSeismicDevnet({ node: 1 });
 *
 * // Create using custom host
 * const devnet2 = createSeismicDevnet({ nodeHost: 'custom.node.example.com' });
 * ```
 */
export declare const createSeismicDevnet: ({ node, nodeHost, explorerUrl, }: CreateSeismicDevnetParams) => Chain;
/**
 * The seismic devnet running at node-1.seismicdev.net
 * Its associated explorer is at explorer-1.seismicdev.net
 *
 * This is a single-node network running seismic's fork of reth on --dev mode
 */
export declare const seismicDevnet1: Chain;
/**
 * The seismic devnet running at node-2.seismicdev.net
 * Its associated explorer is at explorer-2.seismicdev.net
 *
 * This is a single-node network running seismic's fork of reth on --dev mode
 */
export declare const seismicDevnet2: Chain;
/**
 * An alias for {@link seismicDevnet1}
 */
export declare const seismicDevnet: Chain;
/**
 * For connecting to a locally-running seismic-reth instance on --dev mode
 */
export declare const localSeismicDevnet: {
    blockExplorers?: {
        [key: string]: {
            name: string;
            url: string;
            apiUrl?: string | undefined;
        };
        default: {
            name: string;
            url: string;
            apiUrl?: string | undefined;
        };
    } | undefined | undefined;
    contracts?: {
        [x: string]: import("viem").ChainContract | {
            [sourceId: number]: import("viem").ChainContract | undefined;
        } | undefined;
        ensRegistry?: import("viem").ChainContract | undefined;
        ensUniversalResolver?: import("viem").ChainContract | undefined;
        multicall3?: import("viem").ChainContract | undefined;
        universalSignatureVerifier?: import("viem").ChainContract | undefined;
    } | undefined;
    id: 5124;
    name: "Seismic";
    nativeCurrency: {
        readonly decimals: 18;
        readonly name: "Ether";
        readonly symbol: "ETH";
    };
    rpcUrls: {
        readonly default: {
            readonly http: readonly ["http://127.0.0.1:8545"];
            readonly ws: readonly ["ws://127.0.0.1:8546"];
        };
    };
    sourceId?: number | undefined | undefined;
    testnet?: boolean | undefined | undefined;
    custom?: Record<string, unknown> | undefined;
    fees?: import("viem").ChainFees<undefined> | undefined;
    formatters: ChainFormatters;
    serializers?: import("viem").ChainSerializers<undefined, TransactionSerializable> | undefined;
};
/**
 * For connecting to a locally-running seismic anvil instance.
 * Use {@link https://seismic-2.gitbook.io/seismic-book/getting-started/publish-your-docs#sforge-sanvil-and-ssolc sfoundryup}  to install this
 */
export declare const sanvil: {
    blockExplorers?: {
        [key: string]: {
            name: string;
            url: string;
            apiUrl?: string | undefined;
        };
        default: {
            name: string;
            url: string;
            apiUrl?: string | undefined;
        };
    } | undefined | undefined;
    contracts?: {
        [x: string]: import("viem").ChainContract | {
            [sourceId: number]: import("viem").ChainContract | undefined;
        } | undefined;
        ensRegistry?: import("viem").ChainContract | undefined;
        ensUniversalResolver?: import("viem").ChainContract | undefined;
        multicall3?: import("viem").ChainContract | undefined;
        universalSignatureVerifier?: import("viem").ChainContract | undefined;
    } | undefined;
    id: 31337;
    name: "Anvil";
    nativeCurrency: {
        readonly decimals: 18;
        readonly name: "Ether";
        readonly symbol: "ETH";
    };
    rpcUrls: {
        readonly default: {
            readonly http: readonly ["http://127.0.0.1:8545"];
            readonly webSocket: readonly ["ws://127.0.0.1:8546"];
        };
    };
    sourceId?: number | undefined | undefined;
    testnet?: boolean | undefined | undefined;
    custom?: Record<string, unknown> | undefined;
    fees?: import("viem").ChainFees<undefined> | undefined;
    formatters: ChainFormatters;
    serializers?: import("viem").ChainSerializers<undefined, TransactionSerializable> | undefined;
};
//# sourceMappingURL=chain.d.ts.map