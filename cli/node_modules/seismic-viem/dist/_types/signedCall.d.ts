import type { Account, CallParameters, CallReturnType, Chain, Transport } from 'viem';
import { SeismicTxExtras } from './chain';
import { ShieldedWalletClient } from './client';
/**
 * @ignore
 * Represents the parameters for a signed call operation on a blockchain.
 *
 * This type extends the base `CallParameters` type, plus `SeismicTxExtras`. The nonce must also be provided.
 *
 * @template chain - The blockchain chain type (extends `Chain` or `undefined`).
 *
 * @type {SignedCallParameters} - A combination of:
 * - `CallParameters<chain>`: The standard parameters for a blockchain call.
 *
 * @example
 * ```typescript
 * const parameters: SignedCallParameters<MyChain> = {
 *   account: { address: '0x1234...' },
 *   to: '0x5678...',
 *   data: '0xdeadbeef...',
 *   value: 1000n,
 *   gas: 21000n,
 *   data: '0xabcdef123456...',
 * };
 *
 * const result = await signedCall(parameters);
 * console.log('Call result:', result);
 * ```
 */
export type SignedCallParameters<chain extends Chain | undefined> = CallParameters<chain> & SeismicTxExtras;
/**
 * @ignore
 * Represents a signed call operation on a blockchain.
 *
 * A signed call is used to securely interact with blockchain functions that require
 * authentication, such as contract calls or transactions.
 *
 * @template chain - The blockchain chain type (extends `Chain` or `undefined`).
 *
 * @param args - The parameters for the signed call, including details such as:
 * - The blockchain account to use for signing.
 * - The contract address, method, and parameters.
 * - Additional transaction-related options (e.g., gas, value).
 *
 * @returns {Promise<CallReturnType>} A promise that resolves to the result of the signed call,
 * including any data returned by the contract or transaction.
 *
 * @example
 * ```typescript
 * const signedCall: SignedCall<MyChain> = async (args) => {
 *   const result = await performSignedCall(args);
 *   return result;
 * };
 *
 * const result = await signedCall({
 *   account: { address: '0x1234...' },
 *   to: '0x5678...',
 *   data: '0xdeadbeef...',
 *   value: 1000n,
 *   gas: 21000n,
 * });
 * console.log('Call result:', result);
 * ```
 */
export type SignedCall<chain extends Chain | undefined> = (args: SignedCallParameters<chain>) => Promise<CallReturnType>;
/**
 * Executes a signed Ethereum call or contract deployment.
 *
 * This function facilitates both standard signed calls and deployless calls using
 * either bytecode or a factory. It validates the provided parameters, constructs
 * the transaction request, and signs the transaction with the client's account.
 *
 * @template chain - The type of the blockchain chain (extends `Chain` or `undefined`).
 *
 * @param client - {@link ShieldedPublicClient}
 * @param args - {@link SignedCallParameters}
 *
 * @returns A promise that resolves to the result of the call, including any returned data.
 *
 * @throws {BaseError} If conflicting parameters are provided (e.g., both `code` and `factory`).
 * @throws {SignedCallError} If the client cannot sign for the specified address.
 * @throws {CounterfactualDeploymentFailedError} If a deployless call fails due to counterfactual deployment issues.
 *
 * @remarks
 * - If `data` is provided, it should be encrypted with the AES key generated by the client's encryption key and server's public key.
 * - Deployless calls can be made either via bytecode or a factory.
 * - Supports multicall batching if the client is configured accordingly.
 * - The function supports off-chain lookups (CCIP-Read) if enabled on the client.
 *
 * @example
 * ```typescript
 * const result = await signedCall(client, {
 *   to: '0x1234...',
 *   data: '0xabcdef...',
 * });
 * console.log(result.data);
 * ```
 */
export declare function signedCall<TTransport extends Transport, TChain extends Chain | undefined, TAccount extends Account>(client: ShieldedWalletClient<TTransport, TChain, TAccount>, args: SignedCallParameters<TChain>): Promise<CallReturnType>;
//# sourceMappingURL=signedCall.d.ts.map