import type { Account, Address, AssertCurrentChainErrorType, Chain, Client, DeriveChain, FormattedTransactionRequest, GetChainIdErrorType, GetChainParameter, GetTransactionRequestKzgParameter, Hash, PrepareTransactionRequestErrorType, SendRawTransactionErrorType, Transport, UnionOmit } from 'viem';
import type { ParseAccountErrorType, SignTransactionErrorType } from 'viem/accounts';
import type { RecoverAuthorizationAddressErrorType } from 'viem/experimental';
import type { AssertRequestErrorType, GetTransactionErrorReturnType, RequestErrorType } from 'viem/utils';
import { SeismicTxExtras } from './chain';
import type { AccountNotFoundErrorType, AccountTypeNotSupportedErrorType } from './error/account';
import type { GetAccountParameter } from './viem-internal/account';
import type { ErrorType } from './viem-internal/error';
export type SendSeismicTransactionRequest<chain extends Chain | undefined = Chain | undefined, chainOverride extends Chain | undefined = Chain | undefined, _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>> = UnionOmit<FormattedTransactionRequest<_derivedChain>, 'from'> & GetTransactionRequestKzgParameter & SeismicTxExtras;
export type SendSeismicTransactionParameters<chain extends Chain | undefined = Chain | undefined, account extends Account | undefined = Account | undefined, chainOverride extends Chain | undefined = Chain | undefined, request extends SendSeismicTransactionRequest<chain, chainOverride> = SendSeismicTransactionRequest<chain, chainOverride>> = request & GetAccountParameter<account, Account | Address, true, true> & GetChainParameter<chain, chainOverride> & GetTransactionRequestKzgParameter<request>;
export type SendSeismicTransactionReturnType = Hash;
export type SendSeismicTransactionErrorType = ParseAccountErrorType | GetTransactionErrorReturnType<AccountNotFoundErrorType | AccountTypeNotSupportedErrorType | AssertCurrentChainErrorType | AssertRequestErrorType | GetChainIdErrorType | PrepareTransactionRequestErrorType | SendRawTransactionErrorType | RecoverAuthorizationAddressErrorType | SignTransactionErrorType | RequestErrorType> | ErrorType;
/**
 * Sends a shielded transaction on the Seismic network.
 *
 * This function facilitates sending a transaction that includes shielded inputs such as blobs,
 * authorization lists, and encrypted calldata. The transaction is prepared, signed, and
 * submitted to the network based on the provided parameters.
 *
 * @template TChain - The type of the blockchain chain (extends `Chain` or `undefined`).
 * @template TAccount - The type of the account (extends `Account` or `undefined`).
 * @template TRequest - The specific request type for the transaction.
 * @template TChainOverride - The type of the chain override (extends `Chain` or `undefined`).
 *
 * @param client - The client instance used to execute the transaction, including chain, account,
 * and transport configurations.
 * @param parameters - The transaction parameters, including gas, value, blobs, and other details.
 *
 * @returns A promise that resolves to the result of the shielded transaction submission.
 *
 * @throws {AccountNotFoundError} If no account is provided in the client or parameters.
 * @throws {AccountTypeNotSupportedError} If the account type is unsupported for shielded transactions.
 * @throws {Error} If the `data` is invalid or missing.
 *
 * @remarks
 * - Supports various account types, including `json-rpc` and `local`.
 * - Requires a valid `data` in hexadecimal format.
 * - Throws specific errors for unsupported account types or missing account configurations.
 * - Uses the `sendRawTransaction` method for final transaction submission.
 *
 * @example
 * ```typescript
 * const result = await sendShieldedTransaction(client, {
 *   account: { address: '0x1234...' },
 *   chain: seismicChain,
 *   data: '0xabcdef...',
 *   value: 1000n,
 *   gas: 21000n,
 * });
 * console.log('Transaction hash:', result.hash);
 * ```
 */
export declare function sendShieldedTransaction<TChain extends Chain | undefined, TAccount extends Account, const TRequest extends SendSeismicTransactionRequest<TChain, TChainOverride>, TChainOverride extends Chain | undefined = undefined>(client: Client<Transport, TChain, TAccount>, parameters: SendSeismicTransactionParameters<TChain, TAccount, TChainOverride, TRequest>): Promise<SendSeismicTransactionReturnType>;
//# sourceMappingURL=sendTransaction.d.ts.map